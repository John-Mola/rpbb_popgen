anti_join(df_rpbb_fulldata, df_geno, by = c("internal_barcode"))
anti_join(df_geno, df_rpbb_fulldata, by = c("internal_barcode")) %>% View()
gen_rpbb
library(tidyverse)
library(janitor)
library(adegenet)
library(poppr)
library(hierfstat)
library(reshape2)
df_rpbb_fulldata <- readRDS("./data/data_output/output_01d_merged_genotypes.Rdata") %>%
filter(loci_w_data >= 10,
#NOTE that this is ONLY females in this dataset now!!
sex == "female",
#NOTE excluding individuals from known nests! I believe this helps COLONY's assumptions
#!!!!!WHICHNEST IS NOT A RELIABLE FILTER!!!!!
is.na(which_nest))
df_rpbb_colonizer <- read_csv("./analyses/outputs_colony/r_colonizer/rpbb_femalesNOknown_2022-11-14-colonizeR.csv")
v_rpbb_keepers <- readRDS("./analyses/outputs_colony/r_colonizer/02c_v_rpbb_keepers.Rdata")
v_loci_kept <- readRDS("./data/data_output/output_01d_vector_good_loci.Rdata")
# select only the individual shortnames, sites, and genotypes from the dataframe
df_rpbb_simple <- df_rpbb_fulldata %>%
dplyr::select(internal_barcode, cluster, all_of(v_loci_kept)) #%>%
# create vector of individual IDs
v_rpbb_shortnames <- pull(df_rpbb_simple, internal_barcode)
# create vector of site names
v_rpbb_sites <- pull(df_rpbb_simple, cluster)
# remove shortname, site names, then combine adjacent columns to get each allele into a single cell, last a little ditty to remove the "_1" in the merged columns
df_rpbb_onlyGeno <- df_rpbb_simple %>%
dplyr::select(-internal_barcode, -cluster)
df_rpbb_mergeGenos <- mapply(function(x, y) {
paste(x, y, sep = ",")},
df_rpbb_onlyGeno[ ,seq(1, ncol(df_rpbb_onlyGeno), by = 2)],
df_rpbb_onlyGeno[ ,seq(2, ncol(df_rpbb_onlyGeno), by = 2)])
colnames(df_rpbb_mergeGenos) <- gsub(x = colnames(df_rpbb_mergeGenos), pattern = "_1", replacement = "", fixed = TRUE)
df_rpbb_alleles <- as.data.frame(df_rpbb_mergeGenos) %>%
mutate_all(funs(str_replace_all(., "NA,NA", NA_character_)))
#NOTE - one weird thing here is that there's 97 individuals in the Minneapolis region...also, no sibs are removed (yet...)
gen_rpbb = df2genind(df_rpbb_alleles, ploidy = 2, ind.names = v_rpbb_shortnames, pop = v_rpbb_sites, sep = ",")
saveRDS(gen_rpbb, "./analyses/analyses_output/03a_rpbb_femaleNOknown_allSibs_genind.Rdata")
gen_rpbb
df_colonizer
df_rpbb_colonizer
names(df_rpbb_colonizer)
df_rpbb_colonizer %>%
select(longname, year, site, cluster, loci_w_data, family_index)
library(DT)
df_rpbb_colonizer %>%
select(longname, year, site, cluster, loci_w_data, family_index, family_id) %>%
datatable()
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)))
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)),
n = sum(unique(cluster)))
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)),
n = n(unique(cluster)))
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)),
n = n())
?n()
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)),
n = str_count(which_clusters, pattern = ","))
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)),
n = str_count(which_clusters, pattern = ",")+1)
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)),
n = str_count(which_clusters, pattern = ",")) %>%
datatable(colnames = c("COLONY Assignment", "Clusters colony detected within", "Number of clusters (anything >1 is improbably!)"))
locimiss_rpbb = propTyped(gen_rpbb, by = "loc")
locimiss_rpbb[which(locimiss_rpbb < 0.80)] # print loci with < 80% complete genotypes
# # Barplot
barplot(locimiss_rpbb, ylim = c(0,1), ylab = "Complete genotypes (proportion)", xlab = "Locus", las = 2, cex.names = 0.7)
indmiss_rpbb <- propTyped(gen_rpbb, by = "ind")
indmiss_rpbb[ which(indmiss_rpbb < 0.80) ] # print individuals with < 80% complete genotypes
mlg(gen_rpbb_flt)
# remove individuals with less than 80% complete genotypes
gen_rpbb_flt <- missingno(gen_rpbb, type = "geno", cutoff = 0.20) # this does nothing now because I filtered them in the COLONY run....
mlg(gen_rpbb_flt)
isPoly(gen_rpbb_flt) %>% summary # they are all still polymorphic
mlg(gen_rpbb_flt)
?mlg
mlg.id(gen_rpbb_flt)
?mlg.id
mlg.id(gen_rpbb_flt)
mlg.id(gen_rpbb_flt, df = TRUE)
mlg(gen_rpbb_flt, df = TRUE)
locimiss_rpbb = propTyped(gen_rpbb, by = "loc")
indmiss_rpbb <- propTyped(gen_rpbb, by = "ind")
?propTyped
df_rpbb_colonizer %>%
select(longname, year, site, cluster, loci_w_data, family_index, family_id) %>%
datatable(colnames = c("Specimen Longname", "Year", "Site verbatim", "Pop Cluster", "No. Loci with Data", "Raw COLONY assignment", "COLONY assignment with singletons", rownames = FALSE))
df_rpbb_colonizer %>%
select(longname, year, site, cluster, loci_w_data, family_index, family_id) %>%
datatable(colnames = c("Specimen Longname", "Year", "Site verbatim", "Pop Cluster", "No. Loci with Data", "Raw COLONY assignment", "COLONY assignment with singletons"), rownames = FALSE)
df_rpbb_fulldata
names(df_rpbb_colonizer)
df_rpbb_fulldata <- readRDS("./data/data_output/output_01d_merged_genotypes.Rdata") %>%
filter(loci_w_data >= 10,
#NOTE that this is ONLY females in this dataset now!!
sex == "female",
#NOTE excluding individuals from known nests! I believe this helps COLONY's assumptions
#!!!!!WHICHNEST IS NOT A RELIABLE FILTER!!!!!
is.na(which_nest)) %>% mutate(cluster = paste0(state, " (",cluster,")"))
df_rpbb_colonizer <- read_csv("./analyses/outputs_colony/r_colonizer/rpbb_femalesNOknown_2022-11-14-colonizeR.csv") %>% mutate(cluster = paste0(state, " (",cluster,")"))
v_rpbb_keepers <- readRDS("./analyses/outputs_colony/r_colonizer/02c_v_rpbb_keepers.Rdata")
v_loci_kept <- readRDS("./data/data_output/output_01d_vector_good_loci.Rdata")
# select only the individual shortnames, sites, and genotypes from the dataframe
df_rpbb_simple <- df_rpbb_fulldata %>%
dplyr::select(internal_barcode, cluster, all_of(v_loci_kept)) #%>%
# create vector of individual IDs
v_rpbb_shortnames <- pull(df_rpbb_simple, internal_barcode)
# create vector of site names
v_rpbb_sites <- pull(df_rpbb_simple, cluster)
# remove shortname, site names, then combine adjacent columns to get each allele into a single cell, last a little ditty to remove the "_1" in the merged columns
df_rpbb_onlyGeno <- df_rpbb_simple %>%
dplyr::select(-internal_barcode, -cluster)
df_rpbb_mergeGenos <- mapply(function(x, y) {
paste(x, y, sep = ",")},
df_rpbb_onlyGeno[ ,seq(1, ncol(df_rpbb_onlyGeno), by = 2)],
df_rpbb_onlyGeno[ ,seq(2, ncol(df_rpbb_onlyGeno), by = 2)])
colnames(df_rpbb_mergeGenos) <- gsub(x = colnames(df_rpbb_mergeGenos), pattern = "_1", replacement = "", fixed = TRUE)
df_rpbb_alleles <- as.data.frame(df_rpbb_mergeGenos) %>%
mutate_all(funs(str_replace_all(., "NA,NA", NA_character_)))
#NOTE - one weird thing here is that there's 97 individuals in the Minneapolis region...also, no sibs are removed (yet...)
gen_rpbb = df2genind(df_rpbb_alleles, ploidy = 2, ind.names = v_rpbb_shortnames, pop = v_rpbb_sites, sep = ",")
saveRDS(gen_rpbb, "./analyses/analyses_output/03a_rpbb_femaleNOknown_allSibs_genind.Rdata")
# CALCULDATE BASIC STATS using hierfstat
basic_rpbb <- basic.stats(gen_rpbb_flt, diploid = TRUE)
Ho_rpbb <- apply(basic_rpbb$Ho, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 2)
He_rpbb <- apply(basic_rpbb$Hs, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 2)
df_het_rpbb <- data.frame(Site = names(Ho_rpbb), Ho = Ho_rpbb, He = He_rpbb) %>%
melt(id.vars = "Site") %>%
full_join(., df_rpbb_popN, by = c("Site" = "name"))
v_rpbb_popN <- summary(gen_rpbb_flt$pop)
df_rpbb_popN <- tibble::enframe(v_rpbb_popN) %>% rename(N = value)
v_rpbb_pa <- private_alleles(gen_rpbb_flt) %>% apply(MARGIN = 1, FUN = sum)
df_rpbb_pa <- tibble::enframe(v_rpbb_pa) %>% rename(PA = value)
v_rpbb_AR <- allelic.richness(genind2hierfstat(gen_rpbb_flt))$Ar %>%
apply(MARGIN = 2, FUN = mean) %>%
round(digits = 3)
df_rpbb_AR <- tibble::enframe(v_rpbb_AR) %>% rename(AR = value)
Table of various summary stats
```{r summary stats display}
df_sum_stats <- full_join(df_rpbb_popN, df_rpbb_pa) %>% full_join(., df_rpbb_AR)
df_sum_stats %>%
arrange(desc(N)) %>%
datatable(rownames = FALSE,
colnames = c("Cluster", "No. Specimens", "Private Alleles", "Allelic Richness"))
### Observed v. Expected Heterozygosity
```{r heterozygosity}
# CALCULDATE BASIC STATS using hierfstat
basic_rpbb <- basic.stats(gen_rpbb_flt, diploid = TRUE)
Ho_rpbb <- apply(basic_rpbb$Ho, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 2)
He_rpbb <- apply(basic_rpbb$Hs, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 2)
df_het_rpbb <- data.frame(Site = names(Ho_rpbb), Ho = Ho_rpbb, He = He_rpbb) %>%
melt(id.vars = "Site") %>%
full_join(., df_rpbb_popN, by = c("Site" = "name"))
# Italic label
hetlab.o = expression(italic("H")[o])
hetlab.e = expression(italic("H")[e])
ggplot(data = df_het_rpbb, aes(x = reorder(Site, -N), y = value, fill = variable))+
geom_bar(stat = "identity", position = position_dodge(), colour = "black")+
geom_text(aes(y = 0.9, label = N)) +
# scale_y_continuous(expand = c(0,0), limits = c(0,0.50))+
scale_fill_manual(values = c("royalblue", "#bdbdbd"), labels = c(hetlab.o, hetlab.e))+
labs(x = "Region", y = "Heterozygosity") +
theme_classic(base_size = 15) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = filter(df_het_rpbb, N >= 5), aes(x = reorder(Site, -N), y = value, fill = variable))+
geom_bar(stat = "identity", position = position_dodge(), colour = "black")+
geom_text(aes(y = 0.9, label = N)) +
# scale_y_continuous(expand = c(0,0), limits = c(0,0.50))+
scale_fill_manual(values = c("royalblue", "#bdbdbd"), labels = c(hetlab.o, hetlab.e))+
labs(x = "Region", y = "Heterozygosity") +
theme_classic(base_size = 15) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_het_rpbb %>%
datatable()
df_het_rpbb %>%
pivot_wider(names_from = variable, values_from = value)
df_het_rpbb %>%
pivot_wider(names_from = variable, values_from = value) %>%
datatable(rownames = FALSE,
colnames = c("Cluster", "No. Specimens", "Ho", "He"))
df_het_rpbb %>%
pivot_wider(names_from = variable, values_from = value) %>%
arrange(desc(N)) %>%
datatable(rownames = FALSE,
colnames = c("Cluster", "No. Specimens", "Ho", "He"))
df_het_rpbb
df_het_rpbb %>%
pivot_wider(names_from = variable, values_from = value) %>%
arrange(desc(N)) %>%
mutate(diff_H = He - Ho) %>%
datatable(rownames = FALSE,
colnames = c("Cluster", "No. Specimens", "Ho", "He", "He - Ho"))
df_het_rpbb %>%
pivot_wider(names_from = variable, values_from = value) %>%
arrange(desc(N)) %>%
mutate(diff_H = round(He - Ho,3)) %>%
datatable(rownames = FALSE,
colnames = c("Cluster", "No. Specimens", "Ho", "He", "He - Ho"))
fis_rpbb <- apply(basic_rpbb$Fis, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 3)
fst_rpbb = genet.dist(gen_rpbb_flt, method = "WC84")
basic_rpbb
fst_rpbb = genet.dist(gen_rpbb_flt, method = "WC84")
% round(digits = 3)
fst_rpbb
# Convert dist object to data.frame
fst.matrix = as.matrix(fst_rpbb)
ind = which( lower.tri(fst.matrix, diag = FALSE), arr.ind = TRUE)
fst.df = data.frame(Site1 = dimnames(fst.matrix)[[2]][ind[,2]],
Site2 = dimnames(fst.matrix)[[1]][ind[,1]],
Fst = fst.matrix[ ind ] %>% round(digits = 3))
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(fst.matrix)
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Convert minus values to zero
melted_cormat$value[melted_cormat$value < 0] = 0
melted_cormat2 <- melted_cormat %>%
mutate(value = ifelse(Var1 != Var2, value, NA))
# Fst italic label
fst.label = expression(italic("F")[ST])
# Extract middle Fst value for gradient argument
mid = max(melted_cormat2$value, na.rm = TRUE) / 2
# # Heatmap
#
ggplot(data = melted_cormat2, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", mid = "pink", high = "red", midpoint = mid, name = fst.label, limits = c(0, max(melted_cormat2$value)), breaks = c(0, 0.05, 0.10, 0.15, 0.20), na.value = NA) +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "", y = "")
# Convert minus values to zero
fst.df$Fst[fst.df$Fst < 0] = 0
# Fst italic label
fst.label = expression(italic("F")[ST])
# Extract middle Fst value for gradient argument
mid = max(fst.df$Fst) / 2
# Plot heatmap
ggplot(data = fst.df, aes(x = Site1, y = Site2, fill = Fst))+
geom_tile(colour = "black")+
geom_text(aes(label = Fst), color="black", size = 3)+
scale_fill_gradient2(low = "blue", mid = "pink", high = "red", midpoint = mid, name = fst.label, limits = c(0, max(fst.df$Fst)), breaks = c(0, 0.05, 0.10))+
scale_x_discrete(expand = c(0,0))+
scale_y_discrete(expand = c(0,0), position = "right")+
theme(axis.text = element_text(colour = "black", size = 10, face = "bold"),
axis.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank(),
legend.position = "right",
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 10)
)
ggplot(data = melted_cormat2, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "black", mid = "grey", high = "#EEAD0E", midpoint = mid, name = fst.label, limits = c(0, max(melted_cormat2$value)), breaks = c(0, 0.05, 0.10, 0.15, 0.20), na.value = NA) +
theme_minimal(base_size = 15)+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "", y = "")
ggplot(data = melted_cormat2, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "black", mid = "grey", high = "#EEAD0E", midpoint = mid, name = fst.label, limits = c(0, max(melted_cormat2$value)), na.value = NA) +
theme_minimal(base_size = 15)+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "", y = "")
gen_rpbb_flt
df_rpbb_colonizer %>% filter(n>=5)
df_rpbb_colonizer %>% filter(n>=5) %>% group_by(cluster) %>% tally()
df_rpbb_colonizer %>% group_by(cluster) %>% tally()
df_rpbb_colonizer %>% group_by(cluster) %>% tally() %>% filter(n>=5)
#find clusters with >=5 specimens
v_big_pops <- df_rpbb_colonizer %>% group_by(cluster) %>% tally() %>% filter(n>=5) %>% pull(cluster)
#find clusters with >=5 specimens
v_big_pops <- df_rpbb_colonizer %>% group_by(cluster) %>% tally() %>% filter(n>=5) %>% pull(cluster)
gen_rpbb_flt2 = popsub(gen_rpbb_flt, sublist = v_big_pops)
df_rpbb_fulldata <- readRDS("./data/data_output/output_01d_merged_genotypes.Rdata") %>%
filter(loci_w_data >= 10,
#NOTE that this is ONLY females in this dataset now!!
sex == "female",
#NOTE excluding individuals from known nests! I believe this helps COLONY's assumptions
#!!!!!WHICHNEST IS NOT A RELIABLE FILTER!!!!!
is.na(which_nest)) %>% mutate(cluster = paste0(state, " (",cluster,")"))
df_rpbb_colonizer <- read_csv("./analyses/outputs_colony/r_colonizer/rpbb_femalesNOknown_2022-11-14-colonizeR.csv") %>% mutate(cluster = paste0(state, " (",cluster,")"))
v_rpbb_keepers <- readRDS("./analyses/outputs_colony/r_colonizer/02c_v_rpbb_keepers.Rdata")
v_loci_kept <- readRDS("./data/data_output/output_01d_vector_good_loci.Rdata")
# select only the individual shortnames, sites, and genotypes from the dataframe
df_rpbb_simple <- df_rpbb_fulldata %>%
dplyr::select(internal_barcode, cluster, all_of(v_loci_kept)) #%>%
# create vector of individual IDs
v_rpbb_shortnames <- pull(df_rpbb_simple, internal_barcode)
# create vector of site names
v_rpbb_sites <- pull(df_rpbb_simple, cluster)
# remove shortname, site names, then combine adjacent columns to get each allele into a single cell, last a little ditty to remove the "_1" in the merged columns
df_rpbb_onlyGeno <- df_rpbb_simple %>%
dplyr::select(-internal_barcode, -cluster)
df_rpbb_mergeGenos <- mapply(function(x, y) {
paste(x, y, sep = ",")},
df_rpbb_onlyGeno[ ,seq(1, ncol(df_rpbb_onlyGeno), by = 2)],
df_rpbb_onlyGeno[ ,seq(2, ncol(df_rpbb_onlyGeno), by = 2)])
colnames(df_rpbb_mergeGenos) <- gsub(x = colnames(df_rpbb_mergeGenos), pattern = "_1", replacement = "", fixed = TRUE)
df_rpbb_alleles <- as.data.frame(df_rpbb_mergeGenos) %>%
mutate_all(funs(str_replace_all(., "NA,NA", NA_character_)))
#NOTE - one weird thing here is that there's 97 individuals in the Minneapolis region...also, no sibs are removed (yet...)
gen_rpbb = df2genind(df_rpbb_alleles, ploidy = 2, ind.names = v_rpbb_shortnames, pop = v_rpbb_sites, sep = ",")
saveRDS(gen_rpbb, "./analyses/analyses_output/03a_rpbb_femaleNOknown_allSibs_genind.Rdata")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
#May be redundancy in here
library(tidyverse)
library(janitor)
library(kableExtra)
library(sf)
library(maps)
library(ggspatial)
library(plotly)
library(gghighlight)
library(DT)
# library(lubridate)
library(adegenet)
library(poppr)
library(hierfstat)
library(reshape2)
# library(RColorBrewer)
# library(scales)
# Merged genotype and metadata generated in 01d
df_rpbb_fulldata <- readRDS("../data/data_output/output_01d_merged_genotypes.Rdata") %>% mutate(cluster = paste0(state, " (",cluster,")"))
#Error rate data of retained loci generated in 01d
df_error_rates <- readRDS("../data/data_output/output_01d_error_rates.Rdata")
# COLONY siblings data generated in 02c
df_rpbb_colonizer <- read_csv("../analyses/outputs_colony/r_colonizer/rpbb_femalesNOknown_2022-11-14-colonizeR.csv") %>% mutate(cluster = paste0(state, " (",cluster,")"))
# GENIND Object generated in 03a
gen_rpbb <- readRDS("../analyses/analyses_output/03a_rpbb_femaleNOknown_allSibs_genind.Rdata")
#Metadata; historic affinis states for mapping
df_affinis_historic <- read_csv("../data/data_raw/meta_rpbb_external/rpbb_historic_counties.csv")  %>% clean_names()
v_historic_states <- df_affinis_historic %>% distinct(state) %>% pull(state)
bg_map <- st_as_sf(map("state", regions = v_historic_states, plot = FALSE, fill = TRUE))
#bg_map_extant <- st_as_sf(map("county", regions = v_extant_counties, plot = FALSE, fill = TRUE))
#df_rpbb_county_summary <- df_meta_tarsi_cleannames %>% group_by(location_state, location_county) %>% summarise(total_collected = sum(number_collected), lat = mean(location_utm_lat), long = mean(location_utm_long))
p_map <- ggplot() +
geom_sf(data = bg_map, fill = "antiquewhite", alpha = 0.4, color = "grey80", size = 0.4) +
#geom_sf(data = bg_map_extant, fill = "grey", alpha = 0.5, color = "grey80", size = 0.4, aes(text = ID)) +
geom_jitter(data = df_rpbb_fulldata, aes(x = longitude, y = latitude, fill = as.factor(cluster)), alpha = 0.5, size = 2) +
#stat_ellipse(data = df_rpbb_fulldata, aes(x=longitude, y=latitude,color=as.factor(cluster), group = as.factor(cluster)),type = "norm")+
#annotation_scale(location = "bl", width_hint = 0.4) +
# annotation_north_arrow(location = "bl", which_north = "true",
#                        pad_x = unit(0.1, "in"), pad_y = unit(0.3, "in"),
#                        style = north_arrow_fancy_orienteering) +
theme_bw() +
theme(panel.grid.major = element_line(color = gray(0.9),
linetype = "dashed",
size = 0.2),
panel.background = element_rect(fill = "white"),
legend.position = "right") +
labs(x = "", y = "", fill = "Cluster")
ggplotly(p_map)
# ggplot(mtcars, aes(x = cyl, y = mpg, color = as.factor(carb))) +
#   geom_point() +
#   gghighlight(carb == 2, use_direct_label = FALSE, unhighlighted_colour = NULL) +
#   geom_point(pch=21, fill=NA, size=4, colour="black", stroke=0.5)
df_rpbb_colonizer %>%
select(longname, year, site, cluster, loci_w_data, family_index, family_id) %>%
datatable(colnames = c("Specimen Longname", "Year", "Site verbatim", "Pop Cluster", "No. Loci with Data", "Raw COLONY assignment", "COLONY assignment with singletons"), rownames = FALSE)
df_rpbb_colonizer %>%
filter(family_id != "s") %>%
group_by(family_id) %>%
summarise(which_clusters = toString(unique(cluster)),
n = str_count(which_clusters, pattern = ",")+1) %>%
datatable(rownames = FALSE , colnames = c("COLONY Assignment", "Clusters colony detected within", "Number of clusters (anything >1 is improbable!)"))
# FILTERING LOCI, GENOTYPES, INDIVIDUALS, ETC -----------------------------
# MISSING LOCI
locimiss_rpbb = propTyped(gen_rpbb, by = "loc")
locimiss_rpbb[which(locimiss_rpbb < 0.80)] # print loci with < 80% complete genotypes
# there are no loci with <80% completeness
# # Barplot
barplot(locimiss_rpbb, ylim = c(0,1), ylab = "Complete genotypes (proportion)", xlab = "Locus", las = 2, cex.names = 0.7)
# INDIVIDUALS WITH POOR DATA
indmiss_rpbb <- propTyped(gen_rpbb, by = "ind")
indmiss_rpbb[ which(indmiss_rpbb < 0.80) ] # print individuals with < 80% complete genotypes
# remove individuals with less than 80% complete genotypes
gen_rpbb_flt <- missingno(gen_rpbb, type = "geno", cutoff = 0.20) # this does nothing now because I filtered them in the COLONY run....
# CHECKING FOR DUPLICATES OR CLONES
mlg(gen_rpbb_flt)
# there are no dupes
# CHECK LOCI ARE STILL POLYMORPHIC
isPoly(gen_rpbb_flt) %>% summary # they are all still polymorphic
# SUMMARY STATISTICS ------------------------------------------------------
# NUMBER OF SAMPLES PER SITE
v_rpbb_popN <- summary(gen_rpbb_flt$pop)
df_rpbb_popN <- tibble::enframe(v_rpbb_popN) %>% rename(N = value)
# PRIVATE ALLELES PER SITE
v_rpbb_pa <- private_alleles(gen_rpbb_flt) %>% apply(MARGIN = 1, FUN = sum)
# v_rpbb_popN <- summary(gen_rpbb_flt$pop)
df_rpbb_pa <- tibble::enframe(v_rpbb_pa) %>% rename(PA = value)
# ALLELIC RICHNESS PER SITE
# allelic.richness(genind2hierfstat(gen_rpbb_flt))$Ar %>%
#   apply(MARGIN = 2, FUN = mean) %>%
#   round(digits = 3)
v_rpbb_AR <- allelic.richness(genind2hierfstat(gen_rpbb_flt))$Ar %>%
apply(MARGIN = 2, FUN = mean) %>%
round(digits = 3)
# v_rpbb_popN <- summary(gen_rpbb_flt$pop)
df_rpbb_AR <- tibble::enframe(v_rpbb_AR) %>% rename(AR = value)
df_sum_stats <- full_join(df_rpbb_popN, df_rpbb_pa) %>% full_join(., df_rpbb_AR)
df_sum_stats %>%
arrange(desc(N)) %>%
datatable(rownames = FALSE,
colnames = c("Cluster", "No. Specimens", "Private Alleles", "Allelic Richness"))
# HETEROZYGOSITY ----------------------------------------------------------
# CALCULDATE BASIC STATS using hierfstat
basic_rpbb <- basic.stats(gen_rpbb_flt, diploid = TRUE)
# CALCULATE OBSERVED HETEROZYGOSITY
Ho_rpbb <- apply(basic_rpbb$Ho, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 2)
#Ho_rpbb
# CALCULATE EXPECTED HETEROZYGOSITY
He_rpbb <- apply(basic_rpbb$Hs, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 2)
#He_rpbb
# CREATE DATAFRAME OF OBSERVED AND EXPECTED HET
df_het_rpbb <- data.frame(Site = names(Ho_rpbb), Ho = Ho_rpbb, He = He_rpbb) %>%
melt(id.vars = "Site") %>%
full_join(., df_rpbb_popN, by = c("Site" = "name"))
# Italic label
hetlab.o = expression(italic("H")[o])
hetlab.e = expression(italic("H")[e])
ggplot(data = filter(df_het_rpbb, N >= 5), aes(x = reorder(Site, -N), y = value, fill = variable))+
geom_bar(stat = "identity", position = position_dodge(), colour = "black")+
geom_text(aes(y = 0.9, label = N)) +
# scale_y_continuous(expand = c(0,0), limits = c(0,0.50))+
scale_fill_manual(values = c("royalblue", "#bdbdbd"), labels = c(hetlab.o, hetlab.e))+
labs(x = "Region", y = "Heterozygosity") +
theme_classic(base_size = 15) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_het_rpbb %>%
pivot_wider(names_from = variable, values_from = value) %>%
arrange(desc(N)) %>%
mutate(diff_H = round(He - Ho,3)) %>%
datatable(rownames = FALSE,
colnames = c("Cluster", "No. Specimens", "Ho", "He", "He - Ho"))
fis_rpbb <- apply(basic_rpbb$Fis, MARGIN = 2, FUN = mean, na.rm = TRUE) %>%
round(digits = 3)
#find clusters with >=5 specimens
v_big_pops <- df_rpbb_colonizer %>% group_by(cluster) %>% tally() %>% filter(n>=5) %>% pull(cluster)
gen_rpbb_flt2 = popsub(gen_rpbb_flt, sublist = v_big_pops)
fst_rpbb = genet.dist(gen_rpbb_flt2, method = "WC84")
# Convert dist object to data.frame
fst.matrix = as.matrix(fst_rpbb)
ind = which( lower.tri(fst.matrix, diag = FALSE), arr.ind = TRUE)
fst.df = data.frame(Site1 = dimnames(fst.matrix)[[2]][ind[,2]],
Site2 = dimnames(fst.matrix)[[1]][ind[,1]],
Fst = fst.matrix[ ind ] %>% round(digits = 3))
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(fst.matrix)
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Convert minus values to zero
melted_cormat$value[melted_cormat$value < 0] = 0
melted_cormat2 <- melted_cormat %>%
mutate(value = ifelse(Var1 != Var2, value, NA))
# Fst italic label
fst.label = expression(italic("F")[ST])
# Extract middle Fst value for gradient argument
mid = max(melted_cormat2$value, na.rm = TRUE) / 2
ggplot(data = melted_cormat2, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "black", mid = "grey", high = "#EEAD0E", midpoint = mid, name = fst.label, limits = c(0, max(melted_cormat2$value)), na.value = NA) +
theme_minimal(base_size = 15)+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "", y = "")
View(df_rpbb_colonizer)
