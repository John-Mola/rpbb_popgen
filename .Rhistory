df_all_shuf_n19 <- readRDS("./analyses/analyses_output/03d_shuffle_results19.Rdata")
df_all_shuf_n42 <- readRDS("./analyses/analyses_output/03d_shuffle_results42.Rdata")
##%######################################################%##
#                                                          #
####   PLOTTING EXAMPLES OF THE RESHUFFLING PROCEDURE   ####
#                                                          #
##%######################################################%##
#PURPOSE - this is to make a series of figures showing examples of the reshuffling procedure compared to representative datasets
# PACKAGES ----------------------------------------------------------------
library(tidyverse)
# DATA --------------------------------------------------------------------
df_all_shuf_n9 <- readRDS("./analyses/analyses_output/03d_shuffle_results9.Rdata")
df_all_shuf_n11 <- readRDS("./analyses/analyses_output/03d_shuffle_results11.Rdata")
df_all_shuf_n19 <- readRDS("./analyses/analyses_output/03d_shuffle_results19.Rdata")
df_all_shuf_n42 <- readRDS("./analyses/analyses_output/03d_shuffle_results42.Rdata")
(p_seedsave9 <- df_all_shuf_n9 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 4, color = "red", linetype = 2, size = 1.5) +
scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset") +
scale_fill_viridis_d())
(p_seedsave9 <- df_all_shuf_n9 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 4, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset") +
scale_fill_viridis_d())
(p_illin11 <- df_all_shuf_n11 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 10, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset") +
scale_fill_viridis_d())
(p_mnzoo19 <- df_all_shuf_n19 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 13, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset") +
scale_fill_viridis_d())
(p_turtle42 <- df_all_shuf_n42 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 27, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset") +
scale_fill_viridis_d())
(p_seedsave9 <- df_all_shuf_n9 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 4, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Seed Savers 2021") +
scale_fill_viridis_d())
(p_illin11 <- df_all_shuf_n11 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 10, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Illiniwek 2021") +
scale_fill_viridis_d())
(p_mnzoo19 <- df_all_shuf_n19 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 13, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Minnesota Zoo 2021") +
scale_fill_viridis_d())
(p_turtle42 <- df_all_shuf_n42 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 27, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Turtle Valley 2021") +
scale_fill_viridis_d())
library(patchwork)
(p_seedsave9 <- df_all_shuf_n9 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 4, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Seed Savers 2021", subtitle = "N=9") +
scale_fill_viridis_d())
(p_illin11 <- df_all_shuf_n11 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 10, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Illiniwek 2021", subtitle = "N=11") +
scale_fill_viridis_d())
(p_mnzoo19 <- df_all_shuf_n19 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 13, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Minnesota Zoo 2021", subtitle = "N=19") +
scale_fill_viridis_d())
(p_turtle42 <- df_all_shuf_n42 %>%
group_by(nrows, set) %>%
tally() %>%
ggplot(., aes(x = nrows, y = n, fill = set)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_vline(xintercept = 27, color = "red", linetype = 2, size = 1.5) +
# scale_x_continuous(limits = c(25,45), breaks = c(25,30,35,40,45)) +
theme_bw(base_size = 15) +
labs(x = "Unique Families in Reshuffle", y = "Count", fill = "Dataset", title = "Turtle Valley 2021", subtitle = "N=42") +
scale_fill_viridis_d())
(p_seedsave9 + p_illin11) / (p_mnzoo19 + p_turtle42)
(p_seedsave9 + p_illin11) / (p_mnzoo19 + p_turtle42) + plot_layout(guides = 'collect')
p_combined <- (p_seedsave9 + p_illin11) / (p_mnzoo19 + p_turtle42) + plot_layout(guides = 'collect')
(p_combined <- (p_seedsave9 + p_illin11) / (p_mnzoo19 + p_turtle42) + plot_layout(guides = 'collect'))
ggsave(p_combined, filename = "./figures/figures_output/04f_figure_reshuffle_combined.svg")
##%######################################################%##
#                                                          #
####            DIPLOID MALES COUNTING USING            ####
####            NOMURA AND TANIGUCHI METHOD             ####
#                                                          #
##%######################################################%##
#Nomura, T., and Y. Taniguchi. 2022. Simple method for combining multiple-loci marker genotypes to estimate diploid male proportion, with an application to a threatened bumble bee population in Japan. Insectes Sociaux.
# This script is intended to yield an estimate of the number of diploid males in the population, corrected for level of homozygosity across the population. The intention is that by just simply counting the number of males with at least one (or two, or three) heterozygous locus we may be underestimating the true frequency of diploid males in the population. This would occur because if the population exhibits low heterozygosity in general, we may have some number of females that are homozygous anyway...so we might expect that some diploid males are homozygous, but that is unobservable because of the way ploidy is assessed using MSATs
# PACKAGES ----------------------------------------------------------------
library(tidyverse)
# DATA --------------------------------------------------------------------
#dataset of genotypes
# this is set up for source in the markdown document, it will not run if you don't update the directory depth
df_merged <- read_rds("../data/data_output/output_01d_merged_genotypes.Rdata")
library(tidyverse)
#dataset of genotypes
# this is set up for source in the markdown document, it will not run if you don't update the directory depth
df_merged <- read_rds("./data/data_output/output_01d_merged_genotypes.Rdata")
df_genos <- df_merged %>%
dplyr::select(internal_barcode, 28:53)
df_matched <- purrr::map(c("btern01", "bt28", "b96", "bt30", "btms0081", "btms0066", "btms0083", "b126", "btms0062", "btern02", "btms0086", "bl13", "btms0059"), ~ df_genos %>%
mutate(
!!(paste0(.x, "_ans", collapse = "")) :=
UQ(rlang::sym(paste0(.x, "_1", collapse = ""))) == UQ(rlang::sym(paste0(.x, "_2", collapse = ""))) )) %>%
reduce(., left_join) %>%
dplyr::select(internal_barcode, contains("_ans")) %>%
rowwise() %>%
mutate(het_count = sum(c_across(all_of(contains("_ans"))) == "FALSE", na.rm = TRUE))
df_matched %>% group_by(het_count) %>% tally()
df_het_matched <- inner_join(df_merged, dplyr::select(df_matched, internal_barcode, het_count)) %>%
filter(loci_w_data >= 10)
df_het_matched
df_het_matched %>% group_by(named_cluster100, sex) %>% tally()
df_het_matched %>% group_by(named_cluster100, sex) %>% tally() %>% filter(sex == "male")
df_het_matched %>%
mutate(is_het = if_else(het_count >= 2, "yes", "no")) %>%
count(named_cluster100, sex, is_het) %>%
complete(named_cluster100, nesting(sex, is_het), fill = list(n = 0)) %>%
pivot_wider(names_from = is_het, values_from = n) %>%
rowwise() %>%
mutate(n_sex = sum(no, yes), n_dips = sum(yes)) %>%
ungroup() %>%
group_by(named_cluster100) %>%
mutate(n_tot_dips = sum(n_dips),
n_total = sum(n_sex)) %>%
filter(sex == "male") %>%
rename(n_male = n_sex,
n_dip_male = yes) %>%
mutate(n_female = n_total-n_male,
n_dip_female = n_tot_dips - n_dip_male,
n_dip_total = n_tot_dips) %>%
select(-no, -sex, -n_dips) %>%
select(n_male, n_female, n_total, n_dip_total, n_dip_male, n_dip_female) %>%
mutate(cor_prop_dip_male = n_dip_male/n_dip_total,
tot_prop_dip_male = n_dip_male/n_male)
#for appalachian at level 2
(df_2het_app <- df_het_matched %>%
filter(named_cluster100 == "Appalachian") %>%
mutate(is_het = if_else(het_count >= 2, "yes", "no")) %>%
count(sex, is_het))
(v_2het_app <- df_2het_app %>%
filter(is_het == "yes") %>%
mutate(prop_diploid = n/sum(n)) %>%
filter(sex == "male") %>%
pull(prop_diploid))
df_het_1locus <- df_het_matched %>%
mutate(is_het = if_else(het_count >= 2, "yes", "no")) %>%
count(named_cluster100, sex, is_het) %>%
complete(named_cluster100, nesting(sex, is_het), fill = list(n = 0)) %>%
pivot_wider(names_from = is_het, values_from = n) %>%
rowwise() %>%
mutate(n_sex = sum(no, yes), n_dips = sum(yes)) %>%
ungroup() %>%
group_by(named_cluster100) %>%
mutate(n_tot_dips = sum(n_dips),
n_total = sum(n_sex)) %>%
filter(sex == "male") %>%
rename(n_male = n_sex,
n_dip_male = yes) %>%
mutate(n_female = n_total-n_male,
n_dip_female = n_tot_dips - n_dip_male,
n_dip_total = n_tot_dips) %>%
select(-no, -sex, -n_dips) %>%
select(n_male, n_female, n_total, n_dip_total, n_dip_male, n_dip_female) %>%
mutate(cor_prop_dip_male = n_dip_male/n_dip_total,
tot_prop_dip_male = n_dip_male/n_male)
df_het_2locus <- df_het_matched %>%
mutate(is_het = if_else(het_count >= 2, "yes", "no")) %>%
count(named_cluster100, sex, is_het) %>%
complete(named_cluster100, nesting(sex, is_het), fill = list(n = 0)) %>%
pivot_wider(names_from = is_het, values_from = n) %>%
rowwise() %>%
mutate(n_sex = sum(no, yes), n_dips = sum(yes)) %>%
ungroup() %>%
group_by(named_cluster100) %>%
mutate(n_tot_dips = sum(n_dips),
n_total = sum(n_sex)) %>%
filter(sex == "male") %>%
rename(n_male = n_sex,
n_dip_male = yes) %>%
mutate(n_female = n_total-n_male,
n_dip_female = n_tot_dips - n_dip_male,
n_dip_total = n_tot_dips) %>%
select(-no, -sex, -n_dips) %>%
select(n_male, n_female, n_total, n_dip_total, n_dip_male, n_dip_female) %>%
mutate(cor_prop_dip_male = n_dip_male/n_dip_total,
tot_prop_dip_male = n_dip_male/n_male)
df_het_1locus <- df_het_matched %>%
mutate(is_het = if_else(het_count >= 1, "yes", "no")) %>%
count(named_cluster100, sex, is_het) %>%
complete(named_cluster100, nesting(sex, is_het), fill = list(n = 0)) %>%
pivot_wider(names_from = is_het, values_from = n) %>%
rowwise() %>%
mutate(n_sex = sum(no, yes), n_dips = sum(yes)) %>%
ungroup() %>%
group_by(named_cluster100) %>%
mutate(n_tot_dips = sum(n_dips),
n_total = sum(n_sex)) %>%
filter(sex == "male") %>%
rename(n_male = n_sex,
n_dip_male = yes) %>%
mutate(n_female = n_total-n_male,
n_dip_female = n_tot_dips - n_dip_male,
n_dip_total = n_tot_dips) %>%
select(-no, -sex, -n_dips) %>%
select(n_male, n_female, n_total, n_dip_total, n_dip_male, n_dip_female) %>%
mutate(cor_prop_dip_male = n_dip_male/n_dip_total,
tot_prop_dip_male = n_dip_male/n_male)
saveRDS(df_het_1locus, "./analyses/analyses_output/03b_output_het1locus.Rdata")
saveRDS(df_het_2locus, "./analyses/analyses_output/03b_output_het2locus.Rdata")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
df_het_1locus <- readRDS("../analyses/analyses_output/03b_output_het1locus.Rdata")
df_het_2locus <- readRDS("../analyses/analyses_output/03b_output_het2locus.Rdata")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
#May be redundancy in here
library(tidyverse)
library(janitor)
library(kableExtra)
# library(sf)
# library(maps)
# library(ggspatial)
# library(plotly)
# library(gghighlight)
# library(DT)
# # library(lubridate)
library(adegenet)
# library(poppr)
library(hierfstat)
# library(reshape2)
# # library(RColorBrewer)
# # library(scales)
library(readxl)
# library(pegas)
# library(lattice)
# library(PopGenReport)
# library(pophelper)
library(gridExtra)
# library(scatterpie)
# library(ggthemes)
library(lme4)
library(MuMIn)
library(multcomp)
library(flextable)
# USDA database
df_raw_USDA <- read_excel("../data/data_raw/Bombus_affinis_repository__msatdata_ver_22September2022.xlsx", sheet = 2) %>% clean_names()
# Merged genotype and metadata generated in 01d
df_rpbb_fulldata <- readRDS("../data/data_output/output_01d_merged_genotypes.Rdata")
#
# #Error rate data of retained loci generated in 01d
#
# df_error_rates <- readRDS("../data/data_output/output_01d_error_rates.Rdata")
# COLONY siblings data generated in 02c01 - this is "batched" at the level of 100km clusters, so it's fairly crude clustering
df_rpbb_colonizer <- read_csv("../analyses/outputs_colony/r_colonizer/rpbb_batch_colonizeR.csv")
# GENIND Object generated in 03a; this actually should contain filtered siblings now so it's a misnomer; check and correct
# gen_rpbb <- readRDS("../analyses/analyses_output/03a_rpbb_femaleNOknown_NOSibs_genind.Rdata")
gen_rpbb_flt <- readRDS("../analyses/analyses_output/03a01_gen_rpbb_flt.Rdata")
#Metadata; historic affinis states for mapping
# df_affinis_historic <- read_csv("../data/data_raw/meta_rpbb_external/rpbb_historic_counties.csv")  %>% clean_names()
#
# # Pairwise distances between sites
#
# df_joined_clusters <- readRDS("../data/data_output/output_01c_df_cluster100_pw_distances.Rdata")
#
# centroids between 100km sites
df_centroids <- readRDS("../data/data_output/output_01c_df_cluster100_centroids.Rdata")
#
#
# # DAPC output
#
# dapc1 <- readRDS("../analyses/analyses_output/03g_dapc_output.Rdata")
#
# #AMOVA outputs
#
# amova_rpbb <- readRDS("../analyses/analyses_output/03f_amova_primary_output.Rdata")
# amova_signif_rpbb <- readRDS("../analyses/analyses_output/03f_amova_signif_output.RData")
#
# #STRUCTURE stuff
#
# evannosummary <- readRDS("../analyses/analyses_output/03e_structure_evanno.Rdata")
# mergedk3 <- readRDS("../analyses/analyses_output/03e_structure_mergedk3.Rdata")
#total specimens in USDA database
n_total_specimens <- nrow(df_raw_USDA)
#total specimens with ANY genetic data
n_total_genotyped <- nrow(filter(df_raw_USDA, !is.na(name_3)))
#specimens after filtering for lat-long, sex, and other complete metadata; from 2020 or 2021; other quality control (>10 valid loci?)
n_filtered <- nrow(df_rpbb_fulldata)
# specimens used in COLONY; females, had at least 10 loci with data, was NOT from a known nest
n_colony <- nrow(df_rpbb_colonizer)
#specimens in pop-gen analyses; same as COLONY filters plus only 1 sibling per detected colony
n_popgen <- nInd(gen_rpbb_flt)
# df_sample_counts <- tibble(dataset = c("Total Specimens", "Genotyped Specimens", "Filtered Specimens", "Used in COLONY", "Used in PopGen Analysis"), samplesize = c(n_total_specimens, n_total_genotyped, n_filtered, n_colony, n_popgen))
#
# df_sample_counts %>%
#   kable()
n_males <- nrow(filter(df_rpbb_fulldata, sex == "male"))
knitr::include_graphics("../figures/figures_output/04a_collections_map.svg")
p_evanno <- readRDS("../figures/figures_output/04d_figure_evanno.Rdata")
grid.arrange(p_evanno)
knitr::include_graphics("../figures/04d_figure_pie_structure_map_combined.png")
knitr::include_graphics("../figures/figures_output/04e_figure_dapc_scatter.svg")
readRDS("../analyses/analyses_output/03f_amova_primary_output.Rdata")
readRDS("../analyses/analyses_output/03f_amova_signif_output.RData")
df_div_stats <- readRDS("../analyses/analyses_output/03a02_output_df_sum_stats_by_site.Rdata")
# df_div_stats %>%
#   arrange(desc(N)) %>%
#   datatable(rownames = FALSE,
#             colnames = c("Cluster", "No. Specimens", "Private Alleles", "Allelic Richness"),
#             options = list(iDisplayLength = 13, dom = "t"))
df_div_stats %>%
flextable() %>%
set_header_labels(name = "100km Cluster", N = "No. Specimens", PA = "Private Alleles", AR = "Rarefied Allelic Richness") %>%
theme_booktabs(bold_header = TRUE)
df_div_stats_reg <- readRDS("../analyses/analyses_output/03a02_output_df_sum_stats_by_region.Rdata")
# df_div_stats %>%
#   arrange(desc(N)) %>%
#   datatable(rownames = FALSE,
#             colnames = c("Cluster", "No. Specimens", "Private Alleles", "Allelic Richness"),
#             options = list(iDisplayLength = 13, dom = "t"))
df_div_stats_reg %>%
flextable() %>%
set_header_labels(name = "Region", N = "No. Specimens", PA = "Private Alleles", AR = "Rarefied Allelic Richness") %>%
theme_booktabs(bold_header = TRUE)
knitr::include_graphics("../figures/figures_output/04b_figre_he_by_site.svg")
knitr::include_graphics("../figures/figures_output/04b_figre_heho_by_site.svg")
#load these here and then build df and models below...seems better than saving/loading every single output
basic_rpbb <- readRDS("../analyses/analyses_output/03a02_output_basic_rpbb.Rdata")
basic_rpbb_reg <- readRDS("../analyses/analyses_output/03a02_output_basic_rpbb_reg.Rdata")
gen_rpbb_reg <- readRDS("../analyses/analyses_output/03a02_output_gen_rpbb_reg.Rdata")
# EXTRACTING HE FOR ALL SITES, JOINING WITH CENTROITS TO HAVE LAT-LONG PER SITE
df_hs_site <- basic_rpbb$Hs %>% as_tibble(rownames = "locus") %>% pivot_longer(!locus, names_to = "site", values_to = "he") %>%
full_join(., df_centroids, by = c("site" = "named_cluster100"))
# MODEL BY LAT-LONG
# No clear relationship, not informative
mod_he_ll <- lmer(he ~ long_m_center + lat_m_center + (1 | locus), data = df_hs_site, REML = FALSE)
summary(mod_he_ll)
mod_null_he_ll <- lmer(he ~ 1 + (1 | locus), data = df_hs_site, REML = FALSE)
anova(mod_he_ll, mod_null_he_ll)
r.squaredGLMM(mod_he_ll)
# EXTRACTING HE FOR ALL SITES, JOINING WITH CENTROITS TO HAVE LAT-LONG PER SITE
df_ar_site <- allelic.richness(genind2hierfstat(gen_rpbb_flt))$Ar %>% as_tibble(rownames = "locus") %>% pivot_longer(!locus, names_to = "site", values_to = "richness") %>%
full_join(., df_centroids, by = c("site" = "named_cluster100"))
# MODEL BY LAT-LONG
# No clear relationship, not informative
mod_ar_ll <- lmer(richness ~ long_m_center + lat_m_center + (1 | locus), data = df_ar_site, REML = FALSE)
summary(mod_ar_ll)
mod_null_ar_ll <- lmer(richness ~ 1 + (1 | locus), data = df_ar_site, REML = FALSE)
anova(mod_ar_ll, mod_null_ar_ll)
r.squaredGLMM(mod_ar_ll)
# EXTRACTING FIS FOR ALL SITES, JOINING WITH CENTROITS TO HAVE LAT-LONG PER SITE
df_fis_site <- basic_rpbb$Fis %>% as_tibble(rownames = "locus") %>% pivot_longer(!locus, names_to = "site", values_to = "fis") %>%
full_join(., df_centroids, by = c("site" = "named_cluster100"))
# MODEL LAT-LONG
# Not informative
mod_fis_ll <- lmer(fis ~ lat_m_center + long_m_center + (1 | locus), data = df_fis_site, REML = FALSE)
summary(mod_fis_ll)
mod_null_fis_ll <- lmer(fis ~ 1 + (1 | locus), data = df_fis_site, REML = FALSE)
anova(mod_fis_ll, mod_null_fis_ll)
r.squaredGLMM(mod_fis_ll)
# ASSIGNING HE (HS) TO REGIOn BY LOCUS
df_hs_reg <- basic_rpbb_reg$Hs %>% as_tibble(rownames = "locus") %>% pivot_longer(!locus, names_to = "region", values_to = "he")
# FIT MODEL OF HE ~ REGION WITH LOCUS AS RANDOM
# No significant difference/relationship
mod_he_reg <- lmer(he ~ region + (1 | locus), data = df_hs_reg, REML = FALSE)
summary(mod_he_reg)
mod_null_he_reg <- lmer(he ~ 1 + (1 | locus), data = df_hs_reg, REML = FALSE)
anova(mod_he_reg, mod_null_he_reg)
r.squaredGLMM(mod_he_reg)
posthoc_he_reg <- glht(mod_he_reg, linfct = mcp(region = "Tukey"))
summary(posthoc_he_reg)
# EXTRACT VALUES BY REGION
df_ar_reg <- allelic.richness(genind2hierfstat(gen_rpbb_reg))$Ar %>% as_tibble(rownames = "locus") %>% pivot_longer(!locus, names_to = "region", values_to = "ar")
# FIT MODEL, RUN COMPARISONS
# Significant with Appalachian having lower allelic richness than others -- Appalachian collections though also represent a much smaller physical space!
mod_ar_reg <- lmer(ar ~ region + (1 | locus), data = df_ar_reg, REML = FALSE)
summary(mod_ar_reg)
mod_null_ar_reg <- lmer(ar ~ 1 + (1 | locus), data = df_ar_reg, REML = FALSE)
anova(mod_ar_reg, mod_null_ar_reg)
r.squaredGLMM(mod_ar_reg)
posthoc_ar_reg <- glht(mod_ar_reg, linfct = mcp(region = "Tukey"))
summary(posthoc_ar_reg)
# EXTRACT VALUES
df_fis_reg <- basic_rpbb_reg$Fis %>% as_tibble(rownames = "locus") %>% pivot_longer(!locus, names_to = "region", values_to = "fis")
# FIT A MODEL, COMPARE
# Appalachian substantially lower than Central or Northwest (twin cities, really); sort of a contrasting result in my mind with AR as lower Fis value would be considered "good"...observed # of heterozygotes approaching our expected value...
mod_fis_reg <- lmer(fis ~ region + (1 | locus), data = df_fis_reg, REML = FALSE)
summary(mod_fis_reg)
mod_null_fis_reg <- lmer(fis ~ 1 + (1 | locus), data = df_fis_reg, REML = FALSE)
anova(mod_fis_reg, mod_null_fis_reg)
r.squaredGLMM(mod_fis_reg)
posthoc_fis_reg <- glht(mod_fis_reg, linfct = mcp(region = "Tukey"))
summary(posthoc_fis_reg)
knitr::include_graphics("../figures/figures_output/04c_figure_fst_by_distance.svg")
readRDS("../analyses/analyses_output/03a03_output_mod_mantel_pearson.Rdata")
knitr::include_graphics("../figures/figures_output/04c_figure_Fst_by_log_distance.svg")
readRDS("../analyses/analyses_output/03a03_output_mod_mantel_log.Rdata")
readRDS("../analyses/analyses_output/03a03_output_mod_mantel_spearman.Rdata")
knitr::include_graphics("../figures/figures_output/04c_figure_Fst_matrix.svg")
readRDS("../analyses/analyses_output/03d_joined_comparison_to_sierras.Rdata") %>%
mutate_if(is.numeric, ~round(., 2)) %>%
arrange(prop_detected) %>%
flextable() %>%
set_header_labels(custom_name = "10km Site", n_genotyped = "N Genotyped", n_colonies = "N Colonies from COLONY", ml.colony.num = "ML Colony Number from Capwire", CI.lower = "95% CI of ML, low", CI.upper = "95% CI of ML, high", prop_detected = "Proportion of Detected Colonies (N Colonies/ML # of Colonies)", prob_bif15 = "Probabilty from B. bifarius Set1", prob_bif18 = "Probability from B. bifarius Set2", prob_vos15 = "Probability from B. vosnesenskii Set1") %>%
colformat_num(na_str = "NA")
knitr::include_graphics("../figures/figures_output/04f_figure_reshuffle_combined.svg")
df_het_1locus <- readRDS("../analyses/analyses_output/03b_output_het1locus.Rdata")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
df_het_2locus <- readRDS("../analyses/analyses_output/03b_output_het2locus.Rdata")
df_het_1locus %>%
flextable()
df_het_1locus %>%
flextable() %>%
set_header_labels("name")
df_het_1locus %>%
flextable()
df_het_1locus %>%
flextable() %>%
set_header_labels("name", "two", "three" ,"4" ,"5", "6", "7", "8", "9")
?set_header_labels
df_het_1locus %>%
flextable() %>%
set_header_labels("name", "two", "three" ,"four" ,"five", "six", "seve", "eight", "nne")
devtools::install_github("davidgohel/flextable")
library(flextable)
df_het_1locus %>%
flextable() %>%
set_header_labels("name", "two", "three" ,"four" ,"five", "six", "seve", "eight", "nne")
df_het_1locus %>%
flextable() %>%
set_header_labels(values = c("name", "two", "three" ,"four" ,"five", "six", "seve", "eight", "nne"))
df_het_1locus %>%
flextable()
df_het_1locus %>%
flextable() %>%
set_header_labels(values = c("100km Site", "N Males", "N Females" ,"N Total" ,"Total N Heterozygotes", "N Heterozygous Males", "N Heterozygous Females", "N Het Male / Total Het", "N Het Male / Total Males"))
df_het_2locus %>%
flextable() %>%
set_header_labels(values = c("100km Site", "N Males", "N Females" ,"N Total" ,"Total N Heterozygotes", "N Heterozygous Males", "N Heterozygous Females", "N Het Male / Total Het", "N Het Male / Total Males"))
df_het_2locus <- readRDS("../analyses/analyses_output/03b_output_het2locus.Rdata")
df_het_2locus %>%
flextable() %>%
set_header_labels(values = c("100km Site", "N Males", "N Females" ,"N Total" ,"Total N Heterozygotes", "N Heterozygous Males", "N Heterozygous Females", "N Het Male / Total Het", "N Het Male / Total Males"))
